name: Integration Test & Build Packer Image

on:
  push:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: 127.0.0.1
      DB_PORT: 3306

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start MySQL Container
        run: |
          docker run -d --name mysql_container \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.DB_PASSWORD }}" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=5 \
            mysql:8.0

      - name: Wait for MySQL to be Ready
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' mysql_container 2>/dev/null || echo "not found")
            if [ "$STATUS" == "healthy" ]; then
              echo "MySQL is healthy!"
              exit 0
            fi
            echo "Waiting for MySQL to be ready... retry $i"
            sleep 5
          done
          echo "MySQL did not become healthy in time."
          docker logs mysql_container
          exit 1

      - name: Create Database and User
        run: |
          docker exec mysql_container mysql -uroot -p${{ secrets.DB_PASSWORD }} -e "
            CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};
            CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
            GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER }}'@'%';
            FLUSH PRIVILEGES;
          "
      - name: Create Dummy `webapp.zip`
        run: |
          zip -r webapp.zip ./
          ls -al
          
      - name: Configure Environment Variables in `app/app.config`
        run: |
          echo "[DATABASE]" > app/app.config
          echo "DB_USERNAME = '${{ secrets.DB_USER }}'" >> app/app.config
          echo "DB_PASSWORD = '${{ secrets.DB_PASSWORD }}'" >> app/app.config
          echo "DB_NAME = '${{ secrets.DB_NAME }}'" >> app/app.config
          echo "DB_HOST = 127.0.0.1" >> app/app.config
          echo "DB_PORT = 3306" >> app/app.config
          echo "DB_CONNECTION = mysql" >> app/app.config

      - name: Start Flask App (Debug Mode)
        run: |
          echo "Starting Flask App..."
          nohup python run.py > flask.log 2>&1 &  # Run Flask in the background and capture logs
          sleep 10  # Give it time to start

      - name: Check Flask Logs
        run: cat flask.log  # Print logs in case of failure

      - name: Run Tests
        run: pytest -v app/tests/test_api.py
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: 127.0.0.1
          DB_PORT: 3306

      - name: Stop MySQL Container
        run: |
          docker stop mysql_container || true
          docker rm mysql_container || true

  build-artifact:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Application Artifact
        run: |
          mkdir -p artifacts
          zip -r artifacts/webapp.zip app run.py requirements.txt webapp.service
          ls -lh artifacts/  # ✅ Debugging: List the contents and size

      - name: Upload Application Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: artifacts/webapp.zip
        

  build-packer-image:
    runs-on: ubuntu-latest
    needs: build-artifact
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: /tmp  # ✅ Ensure this matches the packer script

      - name: Verify Artifact Exists
        run: |
          echo "🔍 Listing contents of /tmp/"
          ls -lh /tmp/
          if [ ! -f "/tmp/webapp.zip" ]; then
            echo "❌ ERROR: webapp.zip is missing!"
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.10.1/packer_1.10.1_linux_amd64.zip
          unzip packer_1.10.1_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          
      - name: Install Packer Plugins
        run: |
          packer plugins install github.com/hashicorp/amazon
  
      - name: Run Packer Format Check
        run: |
          packer fmt -check -diff aws-packer.pkr.hcl

      - name: Run Packer init
        run: |
          packer init aws-packer.pkr.hcl

      - name: Run Packer Validate
        run: |
          packer validate -var "db_user=$DB_USER" -var "db_password=$DB_PASSWORD" aws-packer.pkr.hcl

      - name: Build Custom Image with Packer (AWS & GCP)
        run: |
          packer build -var "db_user=$DB_USER" -var "db_password=$DB_PASSWORD" aws-packer.pkr.hcl

      - name: Extract AMI ID from Packer Manifest
        id: extract_ami
        run: |
          echo "🔍 Extracting AMI ID from packer-manifest.json..."
          touch packer-manifest.json
          AMI_ID=$(jq -r '.builds[0].artifact_id' packer-manifest.json | cut -d':' -f2)
          echo "🚀 AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
  
      - name: Display Extracted AMI ID
        run: |
          echo "✅ Extracted AMI ID is: ${{ env.AMI_ID }}"
