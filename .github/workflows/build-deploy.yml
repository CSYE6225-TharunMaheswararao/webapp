name: Integration Test & Build Packer Image

on:
  push:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Start MySQL Container
        run: |
          docker run -d --name mysql_container \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.DB_PASSWORD }}" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=5 \
            mysql:8.0

      - name: Wait for MySQL to be Ready
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' mysql_container 2>/dev/null || echo "not found")
            if [ "$STATUS" == "healthy" ]; then
              echo "‚úÖ MySQL is healthy!"
              exit 0
            fi
            echo "‚è≥ Waiting for MySQL to be ready... retry $i"
            sleep 5
          done
          echo "‚ùå MySQL did not become healthy in time."
          docker logs mysql_container
          exit 1

      - name: Wait for MySQL to Accept Connections
        run: |
          for i in {1..10}; do
            if docker exec mysql_container mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.DB_PASSWORD }} --silent; then
              echo "‚úÖ MySQL is accessible!"
              exit 0
            fi
            echo "‚è≥ Waiting for MySQL to accept connections... retry $i"
            sleep 5
          done
          echo "‚ùå MySQL did not accept connections in time."
          exit 1

      - name: Configure Environment Variables in `app/app.config`
        run: |
          echo "[DATABASE]" > app/app.config
          echo "DB_USERNAME = '${{ secrets.DB_USER }}'" >> app/app.config
          echo "DB_PASSWORD = '${{ secrets.DB_PASSWORD }}'" >> app/app.config
          echo "DB_NAME = '${{ secrets.DB_NAME }}'" >> app/app.config
          echo "DB_HOST = 'host.docker.internal'" >> app/app.config  # ‚úÖ Use host.docker.internal
          echo "DB_PORT = 3306" >> app/app.config
          echo "DB_CONNECTION = mysql" >> app/app.config

      - name: Start Flask App (Debug Mode)
        run: |
          echo "üöÄ Starting Flask App..."
          nohup python run.py > flask.log 2>&1 &
          sleep 10  # Wait for Flask to initialize
          echo "üîç Checking Flask logs..."
          cat flask.log

      - name: Run Tests
        run: pytest -v app/tests/test_api.py
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: host.docker.internal
          DB_PORT: 3306

      - name: Stop Services
        run: |
          echo "üõë Stopping Flask & MySQL..."
          pkill -f run.py || true
          docker stop mysql_container || true
          docker rm mysql_container || true

  build-artifact:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Application Artifact
        run: |
          mkdir -p artifacts
          zip -r artifacts/webapp.zip app run.py requirements.txt

      - name: Upload Application Artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: webapp-artifact
          path: artifacts/webapp.zip

  build-packer-image:
    runs-on: ubuntu-latest
    needs: build-artifact
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4.3.1
        with:
          name: webapp-artifact
          path: /tmp

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.10.1/packer_1.10.1_linux_amd64.zip
          unzip packer_1.10.1_linux_amd64.zip
          sudo mv packer /usr/local/bin/

      - name: Build Custom Image with Packer (AWS & GCP)
        run: |
          packer build -var "db_user=$DB_USER" -var "db_password=$DB_PASSWORD" aws-packer.pkr.hcl
