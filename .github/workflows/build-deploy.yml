name: Integration Test & Build Packer Image

on:
  push:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start MySQL Container
        run: |
          docker run -d --name mysql_container \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.DB_PASSWORD }}" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=5 \
            mysql:8.0

      - name: Wait for MySQL to be Ready
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' mysql_container 2>/dev/null || echo "not found")
            if [ "$STATUS" == "healthy" ]; then
              echo "MySQL is healthy!"
              exit 0
            fi
            echo "Waiting for MySQL to be ready... retry $i"
            sleep 5
          done
          echo "MySQL did not become healthy in time."
          docker logs mysql_container
          exit 1

      - name: Create Database and User
        run: |
          docker exec mysql_container mysql -uroot -p${{ secrets.DB_PASSWORD }} -e "
            CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};
            CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
            GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER }}'@'%';
            FLUSH PRIVILEGES;
          "

      - name: Configure Environment Variables in `app/app.config`
        run: |
          echo "[DATABASE]" > app/app.config
          echo "DB_USERNAME = '${{ secrets.DB_USER }}'" >> app/app.config
          echo "DB_PASSWORD = '${{ secrets.DB_PASSWORD }}'" >> app/app.config
          echo "DB_NAME = '${{ secrets.DB_NAME }}'" >> app/app.config
          echo "DB_HOST = 127.0.0.1" >> app/app.config
          echo "DB_PORT = 3306" >> app/app.config
          echo "DB_CONNECTION = mysql" >> app/app.config

      - name: Start Flask App (Debug Mode)
        run: |
          echo "Starting Flask App..."
          nohup python run.py > flask.log 2>&1 &  # Run Flask in the background and capture logs
          sleep 10  # Give it time to start

      - name: Check Flask Logs
        run: cat flask.log  # Print logs in case of failure

      - name: Run Tests
        run: pytest -v app/tests/test_api.py
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Stop MySQL Container
        run: |
          docker stop mysql_container || true
          docker rm mysql_container || true

  build-artifact:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Application Artifact
        run: |
          mkdir -p artifacts
          zip -r artifacts/webapp.zip app run.py requirements.txt webapp.service
          ls -lh artifacts/  # ✅ Debugging: List the contents and size

      - name: Upload Application Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: artifacts/webapp.zip
        

  build-packer-image:
    runs-on: ubuntu-latest
    needs: build-artifact
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: /tmp  # ✅ Ensure this matches the packer script

      - name: Verify Artifact Exists
        run: |
          echo "🔍 Listing contents of /tmp/"
          ls -lh /tmp/
          if [ ! -f "/tmp/webapp.zip" ]; then
            echo "❌ ERROR: webapp.zip is missing!"
          else
            echo "✅ webapp.zip found!"
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.10.1/packer_1.10.1_linux_amd64.zip
          unzip packer_1.10.1_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          
      - name: Install Packer Plugins
        run: |
          packer plugins install github.com/hashicorp/amazon
          packer plugins install github.com/hashicorp/googlecompute

      - name: Install Google Cloud SDK
        run: |
          curl -sSL https://sdk.cloud.google.com | bash
          echo "✅ Google Cloud SDK Installed"
  
      - name: Authenticate to GCP
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
  
      - name: Run Packer Format Check
        run: |
          packer fmt -check -diff aws-packer.pkr.hcl

      - name: Create Dummy `webapp.zip`
        run: |
          zip -r webapp.zip ./
          ls -al

      - name: Run Packer init
        run: |
          packer init aws-packer.pkr.hcl

      - name: Run Packer Validate
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          packer validate -var "db_user=${{ secrets.DB_USER }}" \
                          -var "db_name=${{ secrets.DB_NAME }}" \
                          -var "db_password=${{ secrets.DB_PASSWORD }}" \
                          -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
                          -var "gcp_account_file=gcp-key.json" \
                          -var "ssh_username=ubuntu" \
                          aws-packer.pkr.hcl

      - name: Build Custom Image with Packer (AWS & GCP)
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          packer build -var "db_user=${{ secrets.DB_USER }}" \
                        -var "db_name=${{ secrets.DB_NAME }}" \
                        -var "db_password=${{ secrets.DB_PASSWORD }}" \
                        -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
                        -var "gcp_account_file=gcp-key.json" \
                        -var "ssh_username=ubuntu" \
                        aws-packer.pkr.hcl | tee packer_output.log
          
          # Extract AMI ID directly from Packer output
          AMI_ID=$(grep -oP 'ami-\w{17}' packer_output.log | tail -1)
          echo "Extracted AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # Share AMI with DEMO Account
      - name: Share AMI with DEMO Account
        run: |
          aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }} }]" \
            --region us-east-1

      - name: Configure AWS Credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify Demo Account Identity
        run: |
            echo "Verifying Demo account identity..."
            aws sts get-caller-identity
  
      - name: Get Latest Launch Template Name
        id: get_launch_template
        run: |
            echo "Listing all Launch Templates in Demo account..."
            aws ec2 describe-launch-templates --region us-east-1
            echo "Extracting Launch Template name..."
            LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates \
              --query 'LaunchTemplates[0].LaunchTemplateName' \
              --output text --region us-east-1)
            echo "Raw LAUNCH_TEMPLATE_NAME: '$LAUNCH_TEMPLATE_NAME'"
            if [ -z "$LAUNCH_TEMPLATE_NAME" ]; then
              echo "Error: No launch templates found"
              exit 1
            fi
            if [[ ! "$LAUNCH_TEMPLATE_NAME" =~ ^dev-webapp-lt ]]; then
              echo "Error: Launch template '$LAUNCH_TEMPLATE_NAME' does not start with 'dev-webapp-lt'"
              exit 1
            fi
            echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"
            echo "LAUNCH_TEMPLATE_NAME=$LAUNCH_TEMPLATE_NAME" >> $GITHUB_ENV
  
      - name: Verify Launch Template Before Update
        run: |
            echo "Current Launch Template configuration:"
            aws ec2 describe-launch-template-versions \
              --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
              --versions '$Latest' \
              --region us-east-1
  
      - name: Create New Launch Template Version
        run: |
            NEW_VERSION=$(aws ec2 create-launch-template-version \
              --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
              --source-version '$Latest' \
              --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
              --region us-east-1 \
              --query 'LaunchTemplateVersion.VersionNumber' \
              --output text)
            echo "New Launch Template Version: $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
  
      - name: Set New Version as Default
        run: |
            aws ec2 modify-launch-template \
              --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
              --default-version ${{ env.NEW_VERSION }} \
              --region us-east-1
  
      - name: Verify Launch Template After Update
        run: |
            echo "Launch Template configuration after update:"
            aws ec2 describe-launch-template-versions \
              --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
              --versions '$Latest' \
              --region us-east-1
  
      - name: Verify Autoscaling Group Exists
        run: |
            echo "Verifying Autoscaling Group exists in Demo account..."
            aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names csye6225-asg \
              --region us-east-1
  
      - name: Start Instance Refresh
        id: start_instance_refresh
        run: |
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name csye6225-asg \
              --region us-east-1 \
              --preferences '{"MinHealthyPercentage": 50}' \
              --query 'InstanceRefreshId' \
              --output text)
            echo "Instance Refresh ID: $REFRESH_ID"
            echo "INSTANCE_REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
  
      - name: Wait for Instance Refresh to Complete
        run: |
            echo "Waiting for instance refresh to complete..."
            STATUS="InProgress"
            TIMEOUT=2400  # 15 minutes
            START_TIME=$(date +%s)
            while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
                echo "Error: Instance refresh timed out after $TIMEOUT seconds"
                exit 1
              fi
              sleep 10
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name csye6225-asg \
                --instance-refresh-ids ${{ env.INSTANCE_REFRESH_ID }} \
                --region us-east-1 \
                --query 'InstanceRefreshes[0].Status' \
                --output text)
              echo "Current status: $STATUS"
            done
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh completed successfully."
            else
              echo "Instance refresh failed with status: $STATUS"
              exit 1
            fi  
  
      - name: Display Extracted AMI ID
        run: |
          echo "✅ Extracted AMI ID is: ${{ env.AMI_ID }}"
